//===-- SBFSubtarget.h - Define Subtarget for the SBF -----------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the SBF specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SBF_SBFSUBTARGET_H
#define LLVM_LIB_TARGET_SBF_SBFSUBTARGET_H

#include "SBFFrameLowering.h"
#include "SBFISelLowering.h"
#include "SBFInstrInfo.h"
#include "SBFSelectionDAGInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "SBFGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class SBFSubtarget : public SBFGenSubtargetInfo {
  virtual void anchor();
  SBFInstrInfo InstrInfo;
  SBFFrameLowering FrameLowering;
  SBFTargetLowering TLInfo;
  SBFSelectionDAGInfo TSInfo;

private:
  void initializeEnvironment(const Triple &TT);
  void initSubtargetFeatures(StringRef CPU, StringRef FS);

protected:
  // whether the cpu supports jmp ext
  bool HasJmpExt;

  // whether the cpu supports alu32 instructions.
  bool HasAlu32;

  // whether we should use fixed or dynamic frames
  bool HasDynamicFrames;

  // Relocate FK_Data_8 fixups as R_SBF_64_ABS64
  bool UseRelocAbs64;

  // Not used for anything, just set by the static-syscalls marker feature.
  bool HasStaticSyscalls;

  // whether we should enable MCAsmInfo DwarfUsesRelocationsAcrossSections
  bool UseDwarfRIS;

  // Whether to disable the negate (neg) instruction
  bool DisableNeg;

  // Whether to consider 'sub reg, imm' as 'reg = imm - reg', instead of 'reg =
  // reg - imm'.
  bool ReverseSubImm;

  // Whether we should use the LDDW instruction
  bool NoLddw;

  // Whether to encode destination register in Callx's src field
  bool CallxRegSrc;

  // Whether we have the PQR instruction class
  bool HasPqrClass;

  // Whether to use the new call convention in SBFv2
  bool NewCallConvention;

public:
  // This constructor initializes the data members to match that
  // of the specified triple.
  SBFSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const TargetMachine &TM);

  SBFSubtarget &initializeSubtargetDependencies(const Triple &TT, StringRef CPU,
                                                StringRef FS);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  bool getHasJmpExt() const { return HasJmpExt; }
  bool getHasAlu32() const { return HasAlu32; }
  bool getHasDynamicFrames() const { return HasDynamicFrames; }
  bool getUseDwarfRIS() const { return UseDwarfRIS; }
  bool getDisableNeg() const { return DisableNeg; }
  bool getReverseSubImm() const { return ReverseSubImm; }
  bool getNoLddw() const { return NoLddw; }
  bool getCallXRegSrc() const { return CallxRegSrc; }
  bool getHasPqrClass() const { return HasPqrClass; }
  bool getEnableNewCallConvention() const {
    return HasDynamicFrames && NewCallConvention;
  }
  const SBFInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const SBFFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const SBFTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SBFSelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
};
} // namespace llvm

#endif
